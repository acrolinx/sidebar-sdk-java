/*
* Copyright (c) 2016-present Acrolinx GmbH
*/

task wrapper(type: Wrapper) {
	gradleVersion = '4.4.1'
}

buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath "com.diffplug.gradle:goomph:3.14.0"
		classpath "org.ajoberstar:gradle-git:1.7.2"
		classpath "com.smokejumperit.gradle.license:Gradle-License-Report:+"
		classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
		classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0"
		classpath "gradle.plugin.se.patrikerdes:gradle-use-latest-versions-plugin:0.2.3"
		classpath "com.github.ben-manes:gradle-versions-plugin:0.17.0"
		classpath 'org.owasp:dependency-check-gradle:3.2.1'
		classpath "com.jaredsburrows:gradle-license-plugin:0.8.41"
		classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0"
	}
}

apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'idea'
apply plugin: 'io.codearte.nexus-staging'

allprojects {

	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
		options.memberLevel = JavadocMemberLevel.PUBLIC
	}

	project.version = currentVersion
	group = 'com.acrolinx.client'

	apply plugin: 'com.github.ben-manes.versions'
	apply plugin: 'se.patrikerdes.use-latest-versions'

	dependencyUpdates.resolutionStrategy = {
		componentSelection { rules ->
			rules.all { ComponentSelection selection ->
				boolean rejected = ['dev', 'eap', 'alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
					selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
				}
				if (rejected) {
					selection.reject('Release candidate')
				}
			}
		}
	}
}

subprojects {

	group 'com.acrolinx'

	apply plugin: 'java'
	apply plugin: 'idea'
	// apply plugin: 'eclipse'

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	compileJava.options.encoding = 'UTF-8'
	compileTestJava.options.encoding = 'UTF-8'

	repositories {
		mavenCentral()
		maven {
			url "http://maven-eclipse.github.io/maven"
		}
	}

	dependencies {
		compile 'com.google.guava:guava:25.1-jre'
		testCompile group: 'junit', name: 'junit', version: '4.+'
	}

	apply plugin: 'findbugs'
	findbugs {
		toolVersion = VER_FINDBUGS
		sourceSets = [sourceSets.main]    // don't check the test code
		ignoreFailures = false    // bug free or it doesn't ship!
		reportsDir = file('build/findbugs')
		effort = 'max'            // min|default|max
		reportLevel = 'medium'        // low|medium|high (low = sensitive to even minor mistakes)
		excludeFilter = file("$rootProject.projectDir/findbugs/excludeFilter.xml")
		omitVisitors = []        // bugs that we want to ignore
	}

	tasks.withType(FindBugs) {
		reports {
			xml.enabled = false
			html.enabled = true
		}
	}
}

project(':sidebar-sdk') {

	apply plugin: 'license-report'
	apply plugin: 'com.moowork.node'
	apply plugin: 'com.diffplug.gradle.swt.nativedeps'
	apply plugin: 'maven-publish'
	apply plugin: 'signing'
	apply plugin: 'org.owasp.dependencycheck'
	apply plugin: 'java-library'
	apply plugin: 'com.jaredsburrows.license'
	apply plugin: "com.github.hierynomus.license-report"



	dependencies {
		compile group: 'com.google.code.gson', name:'gson', version: '2.8.5'
		compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
		compile group: 'org.bitbucket.cowwoc', name: 'diff-match-patch', version: '1.1'
		compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
		compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
		compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
		compile group: 'commons-validator', name: 'commons-validator', version: '1.6'
		compile group: 'commons-io', name: 'commons-io', version: '2.6'
	}
}
