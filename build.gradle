import groovy.transform.Field

import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption
import java.util.stream.Collectors

plugins {
    id 'java-library'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id 'com.github.node-gradle.node' version '7.0.2'
    id 'com.github.hierynomus.license-report' version '0.16.1'
    id 'org.openjfx.javafxplugin' version '0.0.14' apply false
    id 'org.sonarqube' version '4.0.0.2929'
    id 'com.diffplug.spotless' version '6.13.0'
}

private static String getOsgiPlatformValue() {
    String osName = System.getProperty('os.name').toLowerCase()

    if (osName.contains('windows')) {
        return 'win32.win32.x86_64'
    } else if (osName.contains('linux')) {
        return 'gtk.linux.x86_64'
    } else if (osName.contains('mac')) {
        return 'cocoa.macosx.x86_64'
    }

    throw new GradleException('unknown OS name: ' + osName)
}

@Field
private static final String SWT_VERSION = '3.116.100'
@Field
private static final String OSGI_PLATFORM = getOsgiPlatformValue()
@Field
private static final String SNAPSHOT_SUFFIX = "-SNAPSHOT"

dependencies {
    api 'com.google.code.gson:gson:2.10.1'
    api 'org.apache.commons:commons-text:1.11.0'
    api 'ch.qos.logback:logback-classic:1.3.13'
    api 'org.slf4j:slf4j-api:2.0.12'
    api 'org.jsoup:jsoup:1.17.2'
    api 'com.google.guava:guava:33.0.0-jre'
    compileOnly "org.eclipse.platform:org.eclipse.swt.$OSGI_PLATFORM:$SWT_VERSION"

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

repositories {
    mavenCentral()
    maven {
        url "https://maven-eclipse.github.io/maven"
    }
}

node {
    download = true
}

sonar {
    properties {
        property "sonar.organization", "acrolinx"
        property "sonar.projectKey", "acrolinx_sidebar-sdk-java"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

private String createNewSnapshotVersion() {
    final String[] currentVersion = currentVersion.split("\\.")
    final int incrementedPatchVersion = Integer.parseInt(currentVersion[currentVersion.length - 1]) + 1

    return currentVersion[0] + '.' + currentVersion[1] + '.' + incrementedPatchVersion + SNAPSHOT_SUFFIX
}

private static void updateVersionProperty(final String versionString) {
    final String propertyName = 'currentVersion'

    final java.nio.file.Path gradlePropertiesPath = Paths.get("gradle.properties")

    if (!Files.exists(gradlePropertiesPath)) {
        throw new IllegalStateException("File does not exist: " + gradlePropertiesPath)
    }

    final List<String> propertyFileContent = Files.readAllLines(gradlePropertiesPath)

    final List<String> updatedPropertyFileContent = propertyFileContent.stream()
            .map(line -> {
                if (line.startsWith("$propertyName=")) {
                    "$propertyName=$versionString"
                } else {
                    line
                }
            })
            .collect(Collectors.toList())

    Files.write(gradlePropertiesPath, updatedPropertyFileContent)
}

static void setGithubOutput(final String name, final String value) {
    final String githubOutput = System.getenv('GITHUB_OUTPUT')
    final java.nio.file.Path githubOutputPath = Paths.get(githubOutput)
    Files.write(githubOutputPath, "$name=$value\n".getBytes(StandardCharsets.UTF_8), StandardOpenOption.APPEND)
}

tasks.register('removeSnapshotSuffix') {
    doLast {
        println("Current version: $currentVersion")

        if (!currentVersion.endsWith(SNAPSHOT_SUFFIX)) {
            throw new IllegalStateException("Current version is not a snapshot: " + currentVersion)
        }

        final String releaseVersion = currentVersion.replace(SNAPSHOT_SUFFIX, "")

        println("Stable version: $releaseVersion")

        updateVersionProperty(releaseVersion)

        setGithubOutput("OLD_SNAPSHOT_VERSION", "$currentVersion")
        setGithubOutput("RELEASE_VERSION", "$releaseVersion")
    }
}

tasks.register('incrementSnapshotVersion') {
    doLast {
        println("Current version: $currentVersion")
        final String newSnapshotVersion = createNewSnapshotVersion()

        println("New snapshot version: $newSnapshotVersion")

        updateVersionProperty(newSnapshotVersion)

        setGithubOutput("NEW_SNAPSHOT_VERSION", newSnapshotVersion)
    }
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.memberLevel = JavadocMemberLevel.PUBLIC
}

project.version = currentVersion
group = 'com.acrolinx.client'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

String buildNumber = System.getenv('BUILD_NUMBER')
String buildVersion = buildNumber != null ? buildNumber : 123
String artifactName = "sidebar-sdk"
String fullVersion = "${project.version}.${buildVersion}"

jar {
    archiveFileName = "${artifactName}-${fullVersion}.jar"
    manifest {
        attributes(
                "Implementation-Title": "${artifactName}",
                "Implementation-Version": "${fullVersion}",
                "Specification-Title": "${artifactName}",
                "Specification-Version": project.version
        )
    }
    from("$rootDir") {
        include 'dependency-licenses/*.html'
    }
}

task copyServerSelectorResources(type: Copy, dependsOn: npm_install) {
    doFirst {
        File mainDirectory = new File('src/main/resources')
        File subDirectory = new File(mainDirectory, 'server-selector')

        if (subDirectory.exists()) {
            assert subDirectory.deleteDir()
        }

        subDirectory.mkdirs()
    }

    from('node_modules/@acrolinx/sidebar-startpage/dist/dist-offline')
    into('src/main/resources/server-selector')
}

task convertLocalizationEncoding() {
    File directory = new File("$projectDir/src/main/resources/localization_iso-8859-1/")

    if (!directory.exists()) {
        directory.mkdirs()
    }

    File sourceDirectory = new File("$projectDir/src/main/resources/localization")
    sourceDirectory.eachFile {
    file ->
        if (file.name.endsWith(".properties")) {
            String fileContents = file.getText('utf-8')
            String fileName = file.name

            File write = new File("$projectDir/src/main/resources/localization_iso-8859-1/" + fileName)
            write.createNewFile()

            if (!fileName.contains("_ja")) {
                write.write(fileContents, 'ISO-8859-1')
            } else {
                StringBuilder stringBuilder = new StringBuilder()

                for (char charValue : fileContents.toCharArray()) {
                    if (charValue >= 128) {
                        stringBuilder.append("\\u").append(String.format("%04X", (int) charValue))
                    } else {
                        stringBuilder.append(charValue)
                    }
                }

                String string = stringBuilder.toString()
                write.write(string, 'ISO-8859-1')
            }
        }
    }
}

javadoc {
    options.addStringOption('Xdoclint:all,-missing', '-quiet')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)

            pom {
                name.set("sidebar-sdk")
                description.set("Acrolinx Sidebar SDK to build Acrolinx integrations for Java FX, Swing or SWT based clients.")
                url.set("https://github.com/acrolinx/sidebar-sdk-java")
                licenses {
                    license {
                        name.set("The Apache Software License, Version 2.0")
                        url.set("https://www.apache.org/licenses/LICENSE-2.0.txt")
                    }
                }
                developers {
                    developer {
                        id.set("Acrolinx Open Source")
                        name.set("Acrolinx")
                        email.set("opensource@acrolinx.com")
                    }
                }
                scm {
                    connection.set("scm:git@github.com:acrolinx/sidebar-sdk-java.git")
                    developerConnection.set("scm:git@github.com:acrolinx/sidebar-sdk-java.git")
                    url.set("https://github.com/acrolinx/sidebar-sdk-java")
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

signing {
    final String signingKey = findProperty("signingKey")
    final String signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

if (JavaVersion.current().isJava11Compatible()) {
    apply plugin: 'org.openjfx.javafxplugin'

    javafx {
        modules = [ 'javafx.swing', 'javafx.web' ]
    }
}

configurations.all {
    resolutionStrategy {
        dependencySubstitution {
            substitute module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}') using module("org.eclipse.platform:org.eclipse.swt.$OSGI_PLATFORM:$SWT_VERSION")
        }
    }
}

downloadLicenses {
    includeProjectDependencies true
    dependencyConfiguration = "compileClasspath"
}

tasks.named('test') {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat()
        licenseHeader '/* Copyright (c) $YEAR Acrolinx GmbH */'
    }
    format 'misc', {
        target '.gitignore', '*.gradle', '*.md', '*.properties'

        indentWithSpaces()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

sourcesJar.dependsOn copyServerSelectorResources
processResources.dependsOn copyServerSelectorResources
processResources.dependsOn convertLocalizationEncoding
jar.dependsOn 'downloadLicenses'
