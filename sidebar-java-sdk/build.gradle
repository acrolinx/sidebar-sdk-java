def buildNumber = System.getenv('TRAVIS_BUILD_NUMBER');

def buildVersion = buildNumber != null ? buildNumber : 123

def artifactName = "sidebar-sdk"
def fullVersion = "${project.version}.${buildVersion}"

def isReleaseBuild = !fullVersion.contains('SNAPSHOT')

def isMasterBranch = false

dependencyCheck {
	cveValidForHours = 1
	format = 'HTML'
	failBuildOnCVSS = '1'
	scanConfigurations = ['compile', 'runtime']
}

task getIsMasterBranch {
	def branch = ""
	def proc = "git rev-parse --abbrev-ref HEAD".execute()
	proc.in.eachLine { line -> branch = line }
	proc.err.eachLine { line -> println line }
	proc.waitFor()
	if (branch.startsWith('master')) {
		isMasterBranch = true
	} else {
		isMasterBranch = false
	}
}

group = 'com.acrolinx.client'


task createVersionPropertiesFile {
	doFirst {
		def Properties versionProps = new Properties()
		def versionPropsFile = file('versionJavaSDK.properties')
		if (versionPropsFile.exists())
			versionProps.load(new FileInputStream(versionPropsFile))
		def code = "${fullVersion}"
		versionProps['VERSION_JAVA_SDK'] = code.toString()
		versionProps.store(versionPropsFile.newWriter(), null)
	}
}

jar {
	archiveName = "${artifactName}-${fullVersion}.jar"
	manifest {
		attributes(
				"Implementation-Title": "${artifactName}",
				"Implementation-Version": "${fullVersion}",
				"Specification-Title": "${artifactName}",
				"Specification-Version": project.version
		)

	}
	from("$projectDir") {
		include 'versionJavaSDK.properties'
	}
	from("$rootDir") {
		include 'dependency-licenses/*.html'
	}
}

task generateThirdPartyLibraryReport(type: Copy, dependsOn: dependencyLicenseReport) {
	from('build/reports/dependency-license') {
		include '*.html'
	}
	into('../dependency-licenses')
}

task copyServerSelectorRessources(type: Copy, dependsOn: npm_install) {

	doFirst {
		def mainDir = new File('src/main/resources')
		def subDir = new File(mainDir, 'server-selector')
		if (subDir.exists()) {
			def result = subDir.deleteDir()
			assert result
		}
		subDir.mkdirs()
		assert subDir.exists()
	}

	from('node_modules/@acrolinx/sidebar-startpage/dist/dist-offline')
	into('src/main/resources/server-selector')
}

task convertLocalizationEncoding() {
	def dir = new File("$projectDir/src/main/resources/localization_iso-8859-1/")
	if (!dir.exists()) {
		dir.mkdirs()
	}
	def sourceDir = new File("$projectDir/src/main/resources/localization")
	sourceDir.eachFile {
		pFile ->
			if (pFile.name.endsWith(".properties")) {
				def f = pFile.getText('utf-8')
				def pFileName = pFile.name
				if (!pFileName.contains("_ja")) {
					def write = new File("$projectDir/src/main/resources/localization_iso-8859-1/" + pFileName)
					write.createNewFile();
					write.write(f, 'ISO-8859-1')
				} else {
					def write = new File("$projectDir/src/main/resources/localization_iso-8859-1/" + pFileName)
					write.createNewFile();
					StringBuilder b = new StringBuilder();
					for (char c : f.toCharArray()) {
						//noinspection GroovyAssignabilityCheck
						if (c >= 128)
						//noinspection GroovyAssignabilityCheck
							b.append("\\u").append(String.format("%04X", (int) c));
						else
							b.append(c);
					}
					def string = b.toString();
					write.write(string, 'ISO-8859-1')
				}

			}
	}
}

task generateJavaDocs(type: Javadoc) {
	source = sourceSets.main.allJava
	destinationDir = new File(rootProject.projectDir, "docs/")
	classpath = sourceSets.main.runtimeClasspath
	failOnError = false
}

task javadocJar(type: Jar, dependsOn: 'generateJavaDocs') {
	baseName = "${artifactName}"
	version = "${fullVersion}"
	classifier = 'javadoc'
	from "${rootProject.projectDir}/docs"
}

task sourceJar(type: Jar) {
	baseName = "${artifactName}"
	version = "${fullVersion}"
	classifier = 'sources'
	from project.sourceSets.main.allSource
}

artifacts {
	archives jar
	archives javadocJar
	archives sourceJar
}

def devId = "Acrolinx Open Source"
def devName = "Acrolinx"
def devEmail = "opensource@acrolinx.com"


publishing {
	publications {
		jar(MavenPublication) {
			from components.java
			artifact sourceJar
			artifact javadocJar
			pom.withXml {
				Node pomNode = asNode()
				pomNode.dependencies.'*'.findAll() {
					it.groupId.text() == 'eclipse-swt-deps'
				}.each() {
					it.parent().remove(it)
				}
				asNode().children().last() + {
					resolveStrategy = Closure.DELEGATE_FIRST
					name 'sidebar-sdk'
					description 'Acrolinx Sidebar SDK to build Acrolinx integrations for Java FX, Swing or SWT based clients.'
					url 'https://github.com/acrolinx/sidebar-sdk-java'
					scm {
						url 'https://github.com/acrolinx/sidebar-sdk-java'
						connection 'scm:git@github.com:acrolinx/sidebar-sdk-java.git'
						developerConnection 'scm:git@github.com:acrolinx/sidebar-sdk-java.git'
					}
					licenses {
						license {
							name 'The Apache Software License, Version 2.0'
							url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
							distribution 'repo'
						}
					}
					if (isReleaseBuild) {
						developers {
							developer {
								id devId
								name devName
								email devEmail
								organization 'Acrolinx'
								organizationUrl 'https://www.acrolinx.com/'
							}
						}
					}
				}
			}
		}
	}
	repositories {
		maven {
			if (isReleaseBuild) {
				url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
				credentials {
					username = sonatypeUsername
					password = sonatypePassword
				}
			} else if (sonatypeUsername == null) {
				url "$buildDir/repo"
			} else if (!isReleaseBuild) {
				url "https://oss.sonatype.org/content/repositories/snapshots/"
				credentials {
					username = sonatypeUsername
					password = sonatypePassword
				}
			}
		}
	}
}


signing {
	required { isReleaseBuild }
	sign publishing.publications.jar
}


task createGithubReleaseTag {
	doLast {
		println 'Creating Github Release Tag'
		if (isReleaseBuild) {
			def hasOldReleaseVersion = grgit.tag.list().find { it.getName() == "release-${project.version}" }
			if (!hasOldReleaseVersion) {
				println 'is new release version'
				grgit.tag.add(name: "release-${project.version}", message: "Releasing ${project.version}")
				grgit.push(tags: true)
			}
		} else {
			println 'NO RELEASE VERSION'
		}
	}
}

//npm_install.dependsOn npm_cache_clean

//noinspection GroovyAssignabilityCheck,GroovyAssignabilityCheck
processResources.dependsOn copyServerSelectorRessources
processResources.dependsOn convertLocalizationEncoding
processResources.dependsOn generateThirdPartyLibraryReport
jar.dependsOn createVersionPropertiesFile
check.dependsOn dependencyCheckAnalyze
