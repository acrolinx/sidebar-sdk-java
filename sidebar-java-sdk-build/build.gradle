plugins {
	id "com.jfrog.artifactory" version "4.4.13"
}

apply plugin: 'java-library-distribution'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'org.ajoberstar.grgit'

def buildNumber = System.getenv('BUILD_NUMBER');

def buildVersion = buildNumber != null ? buildNumber : 123

def artifactName = "sidebar-java-sdk"
def fullVersion = "${project.version}.${buildVersion}"

distTar.enabled = false
distZip.enabled = false

//noinspection GroovyAssignabilityCheck
configurations {
	//noinspection GroovyAssignabilityCheck
	nontransitive {
		//noinspection GroovyAssignabilityCheck
		transitive = false
	}
	runtime.extendsFrom nontransitve
}

dependencies {
	compile (project(':sidebar-java-sdk')) {
		exclude group: 'eclipse-swt-deps'
	}
}

task createVersionPropertiesFile {
	doFirst {
		def Properties versionProps = new Properties()
		def versionPropsFile = file('versionJavaSDK.properties')
		if (versionPropsFile.exists())
			versionProps.load(new FileInputStream(versionPropsFile))
		def code = "${fullVersion}"
		versionProps['VERSION_JAVA_SDK'] = code.toString()
		versionProps.store(versionPropsFile.newWriter(), null)
	}
}

//noinspection GroovyUnusedAssignment
def classPathLibs = "";

task buildFatJar(type: Jar, dependsOn: createVersionPropertiesFile) {
	archiveName = "${artifactName}-${fullVersion}-all.jar"
	manifest {
		attributes(
				"Implementation-Title": "${artifactName}",
				"Implementation-Version": "${fullVersion}",
				"Specification-Title": "${artifactName}",
				"Specification-Version": project.version
		)
	}
	from("$projectDir") {
		include 'LICENSE'
	}
	from("$projectDir") {
		include 'versionJavaSDK.properties'
	}
	from("..") {
		include "dependency-licenses/*.html"
	}
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	//noinspection GroovyAssignabilityCheck
	with jar
}

artifacts {
	archives buildFatJar
}

publishing {
	publications {
		api(MavenPublication) {
			groupId 'com.acrolinx'
			artifactId "${artifactName}"
			artifact buildFatJar
		}
	}
}

def repoKeyActual = (!fullVersion.contains('SNAPSHOT')) ? 'libs-release-local' : 'libs-snapshot-local'

artifactory {
	contextUrl = System.getenv('ARTIFACTORY_URL');
	publish {
		repository {
			repoKey = repoKeyActual
			username = System.getenv('ARTIFACTORY_USERNAME');
			password = System.getenv('ARTIFACTORY_PASSWORD');
			maven = true
		}
		defaults {
			publications('api')
		}
	}
}
